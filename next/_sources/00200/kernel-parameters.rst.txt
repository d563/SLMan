カーネルパラメータ
##################

悲鳴を聞く
**********

　サーバの性能といえばCPUとメモリ、そしてディスクIOで決まります。
ネットワークなどの外部をとりまく環境もパフォーマンスを左右しますがサーバ内の資源といえばこれらの３つです。
これらの１つでも詰まった状態になればロードアベレージの上昇という形で悲鳴を聞くことができます。
カーネルの初期設定では外部から資源を守るためかTCPコネクションまわりの設定が控えめです。
このままでは正しく悲鳴を聞く聞こえてきません。
これから説明するカーネルパラメータを設定ファイル ``/etc/sysctl.conf`` に追記し ``sysctl -p`` コマンドで反映しましょう。

バックログに詰め込む
********************
::

    # SYN-RECEIVED状態のソケットキューの最大数（初期値：128）
    net.ipv4.tcp_max_syn_backlog = 10240

    # ESTABLISHED状態のソケットキューの最大数（初期値：128）
    net.core.somaxconn = 65535

　バックログとはソケットをキューイングするOSの仕組みです。
アプリケーションがアセプトするまでのソケットが対象となります。
一時的なバーストに耐えられるよう最大数を増やしておきましょう。
SYN-RECEIVED状態とはSYNを受け付けてACKを受け取る前、ESTABLISHED状態とはACKを受け取りアセプトされる前を指します。
各ソケットキューの最大数はサーバ側で受け付けるポートごとにカウントされるので注意しましょう。

回転率を上げる
**************
::

    # FIN-WAIT-2状態でFINを待つ秒数（初期値：60）
    net.ipv4.tcp_fin_timeout = 10

    # TIME-WAIT状態でRSTを受け取るとCLOSED状態にする（初期値：0）
    net.ipv4.tcp_rfc1337 = 1

    # TIME-WAIT状態で自分からの接続先が同じソケットを再利用する（初期値：0）
    net.ipv4.tcp_tw_reuse = 1

　コネクションは必ず相手が存在するため扱いがデリケートになります。
デリケートすぎる部分は資源の有効活用のために削ぎ落とす必要があります。
FIN-WAIT-2状態は自らのFINに対するACKを受け付けた状態なので仮に相手からFINが来なくても早めにTIME-WAIT状態に移します。
TIME-WAIT状態は待ち状態ですが明確にRSTを受け付けたのであれば迷わずCLOSED状態に移します。
また全く同じ相手で自分から仕掛けたソケットは強気に使い回します。

役割を尖らせる
**************
::

    # 自分からの接続で使用するポートの範囲（初期値：32768 61000）
    net.ipv4.ip_local_port_range = 1024 65535

    # 実メモリを気にせず確保する（初期値：0）
    vm.overcommit_memory = 1

　サーバごとの役割りを明確に別けておき **他のプロセスを気にしない強気な設定** をしましょう。
他のプロセスが待ち受けるポートと重複する可能性がないので限りあるポートが最大限に使えます。
OOM Killerも他に重要なプロセスがない状態であれば恐くはありません。
プロセス再起動の仕組みを整えた上で潔く殺されましょう。
