python
======
base
----
.. code-block:: python

    from datetime import date, datetime, timedelta
    SQL = '''
    SELECT *
    FROM hoge
    WHERE hoge_date = TO_DATE('%(dateStr)s', 'YYYY-MM-DD')
    '''
    # toDate = datetime.strptime('2015-01-02 03:04:05', '%Y-%m-%d %H:%M:%S')
    dateStr = (date.today() - timedelta(1)).strftime('%Y-%m-%d')
    sql = SQL % {'dateStr': dateStr}

mongodb
-------
::

    pip install pymongo

.. code-block:: python

    from pymongo import Connection
    import json
    con = Connection('localhost', 27017)
    lst = list(con.testdb.testcol.find())
    for dat in lst:
      del dat['_id']

    print json.dumps(lst)

oracle
------
::

    pip install cx_Oracle

.. code-block:: python

    import cx_Oracle
    def getDual():
      con = cx_Oracle.connect(
        'd563',
        'd563',
        '(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=localhost)(PORT=1521)(CONNECT_DATA=(SERVICE_NAME=XE)))'
      )
      cur = con.cursor()
      cur.execute('select * from dual')
      lst = cur.fetchall()
      cur.close()
      con.close()
      for low in lst:
        yield Dual(low)

    class Dual:
      def __init__(self, low):
        self.dummy = low[0]

mysql
-----
::

    yum -y install mysql-devel

    pip install MySQL-python

.. code-block:: python

    import MySQLdb
    import json
    con = MySQLdb.connect(
      host='localhost',
      db='d563',
      user='SLMan',
      passwd='SLManPass')
    cur = con.cursor(MySQLdb.cursors.DictCursor)
    cur.execute('select * from table1')
    lst = list(cur.fetchall())
    cur.close()
    con.close()

    for dat in lst:
      dat['data_created'] = str(dat.get('data_created', ''))
      dat['last_updated'] = str(dat.get('last_updated', ''))

    json.dumps(lst)

wsgi
----
.. module:: json.py
.. code-block:: python

    #!/usr/bin/python
    # -*- coding: utf-8 -*-
    # /var/www/cgi-bin/json.py

    import json
    import logging
    from pymongo import Connection

    logging.basicConfig(
      filename='/var/tmp/json.log',
      level=logging.DEBUG,
      format='%(asctime)s %(message)s')
    def application(environ, start_response):
      dat = environ['wsgi.input'].read(int(environ.get('CONTENT_LENGTH', 0)))
      logging.debug(dat)
      start_response('200 OK', [('Content-type', 'text/plain')])
      return json.dumps(Main().gene(json.loads(dat)))

    def deco(func):
      def _deco(*args):
        return [i for i in func(*args) if i]
      return _deco

    class Main():
      def __init__(self): self.key = 'val'
      @deco
      def gene(self, inp):
        con = Connection('localhost', 27017)
        con.testdb.testcol.save(inp)
        for dat in con.testdb.testcol.find():
          del dat['_id']
          yield dat

fabric
------
.. code-block:: python

    # -*- coding: utf-8 -*-
    # __init__.py
    import fabmodule

    env.hosts = ['hostname']
    env.user = 'd563'
    env.password = 'pass'

.. module:: fabmodule.py

::

    # -*- coding: utf-8 -*-
    # fabmodule.py
    from fabric.api import env, local, lcd, put, run, sudo, cd
    from fabric.contrib.files import exists
    from fabric.decorators import task

    @task
    def ls_bin():
      print env.host_string
      if exists('/usr/bin'):
        with cd('/usr/bin'):
          sudo('ls -al')

::

    fab ls_bin

.. module:: fabmodule-test.py

::

    # -*- coding: utf-8 -*-
    # fabmodule-test.py
    from mock import patch, call
    import fabfile as f

    class TestFabfile():
      @patch('fabric.api.sudo')
      @patch('fabric.contrib.files.exists')
      def test_ls_bin(self, exists, sudo):
        exists.return_value = True
        # exists.side_effect = [True]
        reload(f)
        f.ls_bin()
        assert exists.mock_calls == [call('/usr/bin')]
        assert sudo.mock_calls == [call('ls -al')]

::

    nosetests -v

::

    cmd = 'ls -al; echo'
    s1 = str(run(cmd)).replace('\r', '')
    s2 = local(cmd, capture=True)
    if s1 != s2:
      print 'Error!'

::

    put('dat', '.', use_sudo=True)

mail
----
.. module:: mail.py
.. code-block:: python

    #!/usr/bin/python
    # -*- coding: utf-8 -*-
    # mail.py
    import smtplib
    from email.MIMEText import MIMEText
    u = 'user'
    p = 'pass'
    f = '%s@yahoo.co.jp' % u
    t = [f]
    m = MIMEText('本文', 'plain', 'UTF-8')
    m['Subject'] = 'タイトル'
    m['From'] = f
    m['To'] = ','.join(t)
    s = smtplib.SMTP_SSL('smtp.mail.yahoo.co.jp', 465)
    s.login(u, p)
    s.sendmail(f, t, m.as_string())
    s.quit()
