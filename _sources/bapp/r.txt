r
=
::

    yum -y install R --enablerepo=epel

::

    cat << '[EOF]' > d563.csv
    aaa,bbb,ccc
    1,0,1
    0,1,0
    1,1,1
    2,0,2
    2,2,2
    [EOF]

    R

association
-----------
.. code-block:: R

    install.packages('arules', repos='http://R-Forge.R-project.org')

.. code-block:: R

    library(arules)
    dt.fr = read.csv('d563.csv')
    class(dt.fr)
    dt.mt = as.matrix(dt.fr)
    dt.ts = as.ts(dt.mt)
    dt.ap = apriori(dt.ts, parameter=list(supp=0.0001, maxlen=5, confidence=0.01))
    inspect(head(sort(dt.ap, by='lift'), n=20))

.. code-block:: R

    write(as(dt.mt, 'transactions'), 'd563.ts', sep=',')
    dt.ts = read.transactions('d563.ts', sep=',')

    itemFrequencyPlot(dt.ts, type='absolute')

0to1
----
.. code-block:: R

    dt.fr = read.csv('d563.csv')
    dt.mt = apply(dt.fr, MARGIN=2, FUN=function(X)(X-min(X))/diff(range(X)))

cosine
------
.. code-block:: R

    install.packages('amap', repos='http://cran.r-project.org')

.. code-block:: R

    library(amap)
    dt.fr = read.csv('d563.csv')
    dt.ds = Dist(dt.fr, method='pearson')
    dt.cl = kmeans(dt.ds, 3)$cluster
    cbind(dt.fr, ddd=dt.cl)

tree
----
.. code-block:: R

    install.packages('rpart', repos='http://cran.r-project.org')
    install.packages('partykit', repos='http://cran.r-project.org')

.. code-block:: R

    library(rpart)
    library(partykit)

    tmp = data.frame(Titanic)
    df = data.frame(
      Class = rep(tmp$Class, tmp$Freq),
      Sex = rep(tmp$Sex, tmp$Freq),
      Age = rep(tmp$Age, tmp$Freq),
      Survived = rep(tmp$Survived, tmp$Freq)
    )

    ct1 = rpart(Survived ~ Class + Sex + Age, data=df, method='class')
    plot(as.party(ct1))

.. code-block:: R

    printcp(ct1)
    plotcp(ct1)

    ct2 = rpart(Survived ~ Class + Sex + Age, data=df, method='class', cp=0.022504)

template
--------
.. module:: apriori.R
.. code-block:: R

    #!/usr/bin/Rscript --vanilla
    # apriori.R
    args = commandArgs(trailingOnly=T)
    if(length(args) != 2) {
      write('Usage: csvFile outFile', stderr())
      q()
    }
    library(arules)
    write(
      capture.output(inspect(
        head(sort(
          apriori(
            as.ts(as.matrix(read.csv(args[1]))),
            parameter=list(
              supp=0.0001,
              maxlen=5,
              confidence=0.01)),
          by='lift'),
        n=20))),
      args[2])

::

    chmod +x ./apriori.R
    ./apriori.R d563.csv d563.out
