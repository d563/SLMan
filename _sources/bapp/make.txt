make
====
template
--------
.. module:: header.h
.. code-block:: c

    #ifndef HEADER_H
    #define HEADER_H
    #define DATA_SIZE 16
    /* header.h */
    typedef struct SLMan {
      void (*exec)(struct SLMan *sl);
      char data[DATA_SIZE];
    } SLMan;
    typedef struct DATA01 {
      char name[8];
    } DATA01;
    void sub(SLMan *sl);
    #endif

.. module:: sub.c
.. code-block:: c

    #include <stdio.h>
    #include "header.h"
    /* sub.c */
    void sub(SLMan *sl) {
      printf("%s\n", ((DATA01*) sl->data)->name);
    }

.. module:: main.c
.. code-block:: c

    #include <stdio.h>
    #include <assert.h>
    #include "header.h"
    /* main.c */
    int main(int argc, char *argv[]) {
      SLMan sl;
      assert(sizeof(DATA01) <= DATA_SIZE);
      sl.exec = sub;
      DATA01 *d01 = (DATA01*) sl.data;
      fgets(d01->name, sizeof(d01->name), stdin);
      sl.exec(&sl);
      return 0;
    }

.. module:: makefile

::

    # makefile
    DEST = main
    OBJS = main.o sub.o
    ${DEST}: ${OBJS}
        gcc -Wall -O2 -o ${DEST} ${OBJS}
    .c.o:
        gcc -c $<
    clean:
        rm -f ${DEST} ${OBJS}
